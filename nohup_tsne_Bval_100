08/07/2021 02:26:46 - Success - GPU 3 has 32507 MB of free space.
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f90f9fca100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep20.pth.tar' (epoch 20)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B20'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fc6e3788100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep50.pth.tar' (epoch 50)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B50'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f9f5484b100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep80.pth.tar' (epoch 80)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B80'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fb17d4a4100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep110.pth.tar' (epoch 110)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B110'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f1527c95100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep140.pth.tar' (epoch 140)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B140'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f7097ed4100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep170.pth.tar' (epoch 170)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B170'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7ffac811e100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep200.pth.tar' (epoch 200)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B200'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fa3c53e5100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep230.pth.tar' (epoch 230)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B230'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f8237e59100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep260.pth.tar' (epoch 260)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B260'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7feb7a0b7100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep290.pth.tar' (epoch 290)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B290'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fbd3d339100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep320.pth.tar' (epoch 320)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B320'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f7716f94100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep350.pth.tar' (epoch 350)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B350'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fd3ae09a100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep380.pth.tar' (epoch 380)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B380'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f5c84a34100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep410.pth.tar' (epoch 410)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B410'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f283d3ca100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep440.pth.tar' (epoch 440)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B440'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f7481e6c100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep470.pth.tar' (epoch 470)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B470'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f0ec1de2100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep500.pth.tar' (epoch 500)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B500'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f003fe88100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep530.pth.tar' (epoch 530)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B530'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f8a42f61100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep560.pth.tar' (epoch 560)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B560'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f8027556100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep590.pth.tar' (epoch 590)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B590'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f10eef39100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep620.pth.tar' (epoch 620)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B620'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f50c4cb9100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep650.pth.tar' (epoch 650)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B650'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f8f6ae29100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep680.pth.tar' (epoch 680)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B680'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f00aa7a9100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep710.pth.tar' (epoch 710)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B710'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7f3d28dcb100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep740.pth.tar' (epoch 740)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B740'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fdcb1831100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep770.pth.tar' (epoch 770)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B770'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
Cannot import minkowski engine. Try spconv next
Dataset: ['kitti']
Cannot import minkowski engine. Try spconv next
==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Trainable  | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Trainable  | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Trainable  | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Trainable  | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Trainable  | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Trainable  | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Trainable  | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Trainable  | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Trainable  | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Trainable  | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Trainable  | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Trainable  | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Trainable  | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Trainable  | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Trainable  | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Trainable  | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Trainable  | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Trainable  | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Trainable  | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Trainable  | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Trainable  | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Trainable  | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Trainable  | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Trainable  | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Trainable  | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Trainable  | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Trainable  | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Trainable  | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Trainable  | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Trainable  | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Trainable  | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Trainable  | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Trainable  | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Trainable  | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Trainable  | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Trainable  | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Trainable  | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Trainable  | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Trainable  | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Trainable  | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Trainable  | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Trainable  | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Trainable  | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Trainable  | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Trainable  | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Trainable  | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Trainable  | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Trainable  | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Trainable  | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Trainable  | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Trainable  | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Trainable  | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Trainable  | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Trainable  | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Trainable  | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Trainable  | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Trainable  | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Trainable  | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Trainable  | 512                            | 512
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
PointNet2MSG(
  (SA_modules): ModuleList(
    (0): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(16, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(4, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(32, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (1): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(99, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(64, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (2): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(259, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(128, 196, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(196, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(196, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
    (3): PointnetSAModuleMSG(
      (groupers): ModuleList(
        (0): QueryAndGroup()
        (1): QueryAndGroup()
      )
      (mlps): ModuleList(
        (0): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
        (1): Sequential(
          (0): Conv2d(515, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU()
          (3): Conv2d(256, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (4): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU()
          (6): Conv2d(384, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (7): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (8): ReLU()
        )
      )
    )
  )
  (FP_modules): ModuleList(
    (0): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(257, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (1): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(608, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (2): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
    (3): PointnetFPModule(
      (mlp): Sequential(
        (0): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU()
        (3): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (5): ReLU()
      )
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
SA_modules.0.mlps.0.0.weight                                           | Frozen     | 16 x 4 x 1 x 1                 | 64
SA_modules.0.mlps.0.1.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.1.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.3.weight                                           | Frozen     | 16 x 16 x 1 x 1                | 256
SA_modules.0.mlps.0.4.weight                                           | Frozen     | 16                             | 16
SA_modules.0.mlps.0.4.bias                                             | Frozen     | 16                             | 16
SA_modules.0.mlps.0.6.weight                                           | Frozen     | 32 x 16 x 1 x 1                | 512
SA_modules.0.mlps.0.7.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.0.7.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.0.weight                                           | Frozen     | 32 x 4 x 1 x 1                 | 128
SA_modules.0.mlps.1.1.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.1.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.3.weight                                           | Frozen     | 32 x 32 x 1 x 1                | 1024
SA_modules.0.mlps.1.4.weight                                           | Frozen     | 32                             | 32
SA_modules.0.mlps.1.4.bias                                             | Frozen     | 32                             | 32
SA_modules.0.mlps.1.6.weight                                           | Frozen     | 64 x 32 x 1 x 1                | 2048
SA_modules.0.mlps.1.7.weight                                           | Frozen     | 64                             | 64
SA_modules.0.mlps.1.7.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.0.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.3.weight                                           | Frozen     | 64 x 64 x 1 x 1                | 4096
SA_modules.1.mlps.0.4.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.0.4.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.0.6.weight                                           | Frozen     | 128 x 64 x 1 x 1               | 8192
SA_modules.1.mlps.0.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.0.7.bias                                             | Frozen     | 128                            | 128
SA_modules.1.mlps.1.0.weight                                           | Frozen     | 64 x 99 x 1 x 1                | 6336
SA_modules.1.mlps.1.1.weight                                           | Frozen     | 64                             | 64
SA_modules.1.mlps.1.1.bias                                             | Frozen     | 64                             | 64
SA_modules.1.mlps.1.3.weight                                           | Frozen     | 96 x 64 x 1 x 1                | 6144
SA_modules.1.mlps.1.4.weight                                           | Frozen     | 96                             | 96
SA_modules.1.mlps.1.4.bias                                             | Frozen     | 96                             | 96
SA_modules.1.mlps.1.6.weight                                           | Frozen     | 128 x 96 x 1 x 1               | 12288
SA_modules.1.mlps.1.7.weight                                           | Frozen     | 128                            | 128
SA_modules.1.mlps.1.7.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.0.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.0.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.0.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.0.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.0.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.0.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.0.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.0.7.bias                                             | Frozen     | 256                            | 256
SA_modules.2.mlps.1.0.weight                                           | Frozen     | 128 x 259 x 1 x 1              | 33152
SA_modules.2.mlps.1.1.weight                                           | Frozen     | 128                            | 128
SA_modules.2.mlps.1.1.bias                                             | Frozen     | 128                            | 128
SA_modules.2.mlps.1.3.weight                                           | Frozen     | 196 x 128 x 1 x 1              | 25088
SA_modules.2.mlps.1.4.weight                                           | Frozen     | 196                            | 196
SA_modules.2.mlps.1.4.bias                                             | Frozen     | 196                            | 196
SA_modules.2.mlps.1.6.weight                                           | Frozen     | 256 x 196 x 1 x 1              | 50176
SA_modules.2.mlps.1.7.weight                                           | Frozen     | 256                            | 256
SA_modules.2.mlps.1.7.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.0.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.3.weight                                           | Frozen     | 256 x 256 x 1 x 1              | 65536
SA_modules.3.mlps.0.4.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.0.4.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.0.6.weight                                           | Frozen     | 512 x 256 x 1 x 1              | 131072
SA_modules.3.mlps.0.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.0.7.bias                                             | Frozen     | 512                            | 512
SA_modules.3.mlps.1.0.weight                                           | Frozen     | 256 x 515 x 1 x 1              | 131840
SA_modules.3.mlps.1.1.weight                                           | Frozen     | 256                            | 256
SA_modules.3.mlps.1.1.bias                                             | Frozen     | 256                            | 256
SA_modules.3.mlps.1.3.weight                                           | Frozen     | 384 x 256 x 1 x 1              | 98304
SA_modules.3.mlps.1.4.weight                                           | Frozen     | 384                            | 384
SA_modules.3.mlps.1.4.bias                                             | Frozen     | 384                            | 384
SA_modules.3.mlps.1.6.weight                                           | Frozen     | 512 x 384 x 1 x 1              | 196608
SA_modules.3.mlps.1.7.weight                                           | Frozen     | 512                            | 512
SA_modules.3.mlps.1.7.bias                                             | Frozen     | 512                            | 512
FP_modules.0.mlp.0.weight                                              | Frozen     | 128 x 257 x 1 x 1              | 32896
FP_modules.0.mlp.1.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.1.bias                                                | Frozen     | 128                            | 128
FP_modules.0.mlp.3.weight                                              | Frozen     | 128 x 128 x 1 x 1              | 16384
FP_modules.0.mlp.4.weight                                              | Frozen     | 128                            | 128
FP_modules.0.mlp.4.bias                                                | Frozen     | 128                            | 128
FP_modules.1.mlp.0.weight                                              | Frozen     | 256 x 608 x 1 x 1              | 155648
FP_modules.1.mlp.1.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.1.bias                                                | Frozen     | 256                            | 256
FP_modules.1.mlp.3.weight                                              | Frozen     | 256 x 256 x 1 x 1              | 65536
FP_modules.1.mlp.4.weight                                              | Frozen     | 256                            | 256
FP_modules.1.mlp.4.bias                                                | Frozen     | 256                            | 256
FP_modules.2.mlp.0.weight                                              | Frozen     | 512 x 768 x 1 x 1              | 393216
FP_modules.2.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.2.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.2.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.2.mlp.4.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.0.weight                                              | Frozen     | 512 x 1536 x 1 x 1             | 786432
FP_modules.3.mlp.1.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.1.bias                                                | Frozen     | 512                            | 512
FP_modules.3.mlp.3.weight                                              | Frozen     | 512 x 512 x 1 x 1              | 262144
FP_modules.3.mlp.4.weight                                              | Frozen     | 512                            | 512
FP_modules.3.mlp.4.bias                                                | Frozen     | 512                            | 512
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Trainable  | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Trainable  | 16                             | 16
conv_input.1.bias                                                      | Trainable  | 16                             | 16
conv1.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Trainable  | 16                             | 16
conv1.0.1.bias                                                         | Trainable  | 16                             | 16
conv2.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Trainable  | 32                             | 32
conv2.0.1.bias                                                         | Trainable  | 32                             | 32
conv2.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Trainable  | 32                             | 32
conv2.1.1.bias                                                         | Trainable  | 32                             | 32
conv2.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Trainable  | 32                             | 32
conv2.2.1.bias                                                         | Trainable  | 32                             | 32
conv3.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Trainable  | 64                             | 64
conv3.0.1.bias                                                         | Trainable  | 64                             | 64
conv3.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Trainable  | 64                             | 64
conv3.1.1.bias                                                         | Trainable  | 64                             | 64
conv3.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Trainable  | 64                             | 64
conv3.2.1.bias                                                         | Trainable  | 64                             | 64
conv4.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Trainable  | 64                             | 64
conv4.0.1.bias                                                         | Trainable  | 64                             | 64
conv4.1.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Trainable  | 64                             | 64
conv4.1.1.bias                                                         | Trainable  | 64                             | 64
conv4.2.0.weight                                                       | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Trainable  | 64                             | 64
conv4.2.1.bias                                                         | Trainable  | 64                             | 64
conv_up_t4.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t4.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t4.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m4.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m4.1.bias                                                      | Trainable  | 64                             | 64
inv_conv4.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Trainable  | 64                             | 64
inv_conv4.1.bias                                                       | Trainable  | 64                             | 64
conv_up_t3.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn1.bias                                                    | Trainable  | 64                             | 64
conv_up_t3.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Trainable  | 64                             | 64
conv_up_t3.bn2.bias                                                    | Trainable  | 64                             | 64
conv_up_m3.0.weight                                                    | Trainable  | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Trainable  | 64                             | 64
conv_up_m3.1.bias                                                      | Trainable  | 64                             | 64
inv_conv3.0.weight                                                     | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Trainable  | 32                             | 32
inv_conv3.1.bias                                                       | Trainable  | 32                             | 32
conv_up_t2.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn1.bias                                                    | Trainable  | 32                             | 32
conv_up_t2.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Trainable  | 32                             | 32
conv_up_t2.bn2.bias                                                    | Trainable  | 32                             | 32
conv_up_m2.0.weight                                                    | Trainable  | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Trainable  | 32                             | 32
conv_up_m2.1.bias                                                      | Trainable  | 32                             | 32
inv_conv2.0.weight                                                     | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Trainable  | 16                             | 16
inv_conv2.1.bias                                                       | Trainable  | 16                             | 16
conv_up_t1.conv1.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn1.bias                                                    | Trainable  | 16                             | 16
conv_up_t1.conv2.weight                                                | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Trainable  | 16                             | 16
conv_up_t1.bn2.bias                                                    | Trainable  | 16                             | 16
conv_up_m1.0.weight                                                    | Trainable  | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Trainable  | 16                             | 16
conv_up_m1.1.bias                                                      | Trainable  | 16                             | 16
conv5.0.0.weight                                                       | Trainable  | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Trainable  | 16                             | 16
conv5.0.1.bias                                                         | Trainable  | 16                             | 16
head.clf.0.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.0.bias                                                        | Trainable  | 128                            | 128
head.clf.2.weight                                                      | Trainable  | 128 x 128                      | 16384
head.clf.2.bias                                                        | Trainable  | 128                            | 128

==============================   Model   ==============================
UNetV2_concat(
  (conv_input): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv1): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv2): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv3): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv4): SparseSequential(
    (0): SparseSequential(
      (0): SparseConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (1): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
    (2): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (conv_up_t4): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m4): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv4): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t3): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m3): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(64, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv3): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t2): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m2): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(32, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (inv_conv2): SparseSequential(
    (0): SparseInverseConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv_up_t1): SparseBasicBlock(
    (conv1): SubMConv3d()
    (bn1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (relu): ReLU()
    (conv2): SubMConv3d()
    (bn2): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
  )
  (conv_up_m1): SparseSequential(
    (0): SubMConv3d()
    (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
    (2): ReLU()
  )
  (conv5): SparseSequential(
    (0): SparseSequential(
      (0): SubMConv3d()
      (1): BatchNorm1d(16, eps=0.001, momentum=0.01, affine=True, track_running_stats=True)
      (2): ReLU()
    )
  )
  (head): MLP(
    (clf): Sequential(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): ReLU(inplace=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
    )
  )
)
==============================   Parameters   ==============================
conv_input.0.weight                                                    | Frozen     | 3 x 3 x 3 x 4 x 16             | 1728
conv_input.1.weight                                                    | Frozen     | 16                             | 16
conv_input.1.bias                                                      | Frozen     | 16                             | 16
conv1.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv1.0.1.weight                                                       | Frozen     | 16                             | 16
conv1.0.1.bias                                                         | Frozen     | 16                             | 16
conv2.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 32            | 13824
conv2.0.1.weight                                                       | Frozen     | 32                             | 32
conv2.0.1.bias                                                         | Frozen     | 32                             | 32
conv2.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.1.1.weight                                                       | Frozen     | 32                             | 32
conv2.1.1.bias                                                         | Frozen     | 32                             | 32
conv2.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv2.2.1.weight                                                       | Frozen     | 32                             | 32
conv2.2.1.bias                                                         | Frozen     | 32                             | 32
conv3.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 32 x 64            | 55296
conv3.0.1.weight                                                       | Frozen     | 64                             | 64
conv3.0.1.bias                                                         | Frozen     | 64                             | 64
conv3.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.1.1.weight                                                       | Frozen     | 64                             | 64
conv3.1.1.bias                                                         | Frozen     | 64                             | 64
conv3.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv3.2.1.weight                                                       | Frozen     | 64                             | 64
conv3.2.1.bias                                                         | Frozen     | 64                             | 64
conv4.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.0.1.weight                                                       | Frozen     | 64                             | 64
conv4.0.1.bias                                                         | Frozen     | 64                             | 64
conv4.1.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.1.1.weight                                                       | Frozen     | 64                             | 64
conv4.1.1.bias                                                         | Frozen     | 64                             | 64
conv4.2.0.weight                                                       | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv4.2.1.weight                                                       | Frozen     | 64                             | 64
conv4.2.1.bias                                                         | Frozen     | 64                             | 64
conv_up_t4.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t4.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t4.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t4.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m4.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m4.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m4.1.bias                                                      | Frozen     | 64                             | 64
inv_conv4.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
inv_conv4.1.weight                                                     | Frozen     | 64                             | 64
inv_conv4.1.bias                                                       | Frozen     | 64                             | 64
conv_up_t3.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn1.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn1.bias                                                    | Frozen     | 64                             | 64
conv_up_t3.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 64 x 64            | 110592
conv_up_t3.bn2.weight                                                  | Frozen     | 64                             | 64
conv_up_t3.bn2.bias                                                    | Frozen     | 64                             | 64
conv_up_m3.0.weight                                                    | Frozen     | 3 x 3 x 3 x 128 x 64           | 221184
conv_up_m3.1.weight                                                    | Frozen     | 64                             | 64
conv_up_m3.1.bias                                                      | Frozen     | 64                             | 64
inv_conv3.0.weight                                                     | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
inv_conv3.1.weight                                                     | Frozen     | 32                             | 32
inv_conv3.1.bias                                                       | Frozen     | 32                             | 32
conv_up_t2.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn1.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn1.bias                                                    | Frozen     | 32                             | 32
conv_up_t2.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 32 x 32            | 27648
conv_up_t2.bn2.weight                                                  | Frozen     | 32                             | 32
conv_up_t2.bn2.bias                                                    | Frozen     | 32                             | 32
conv_up_m2.0.weight                                                    | Frozen     | 3 x 3 x 3 x 64 x 32            | 55296
conv_up_m2.1.weight                                                    | Frozen     | 32                             | 32
conv_up_m2.1.bias                                                      | Frozen     | 32                             | 32
inv_conv2.0.weight                                                     | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
inv_conv2.1.weight                                                     | Frozen     | 16                             | 16
inv_conv2.1.bias                                                       | Frozen     | 16                             | 16
conv_up_t1.conv1.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn1.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn1.bias                                                    | Frozen     | 16                             | 16
conv_up_t1.conv2.weight                                                | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv_up_t1.bn2.weight                                                  | Frozen     | 16                             | 16
conv_up_t1.bn2.bias                                                    | Frozen     | 16                             | 16
conv_up_m1.0.weight                                                    | Frozen     | 3 x 3 x 3 x 32 x 16            | 13824
conv_up_m1.1.weight                                                    | Frozen     | 16                             | 16
conv_up_m1.1.bias                                                      | Frozen     | 16                             | 16
conv5.0.0.weight                                                       | Frozen     | 3 x 3 x 3 x 16 x 16            | 6912
conv5.0.1.weight                                                       | Frozen     | 16                             | 16
conv5.0.1.bias                                                         | Frozen     | 16                             | 16
head.clf.0.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.0.bias                                                        | Frozen     | 128                            | 128
head.clf.2.weight                                                      | Frozen     | 128 x 128                      | 16384
head.clf.2.bias                                                        | Frozen     | 128                            | 128


==============================   Train data   ==============================
<datasets.depth_dataset.DepthContrastDataset object at 0x7fc2c1a4c100>
Checkpoint loaded: 'checkpoints/pointnetMSG_UnetV2_Kitti/PointnetMSG_UnetV2_B/checkpoint-ep800.pth.tar' (epoch 800)
Data path: '['/home/baraujo/kitti/kitti_tsne_val.npy']'
Run: 'B800'
Set: 'val'
============================== Epoch 0 ==============================

train: Epoch 0
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 1 ==============================

train: Epoch 1
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 2 ==============================

train: Epoch 2
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 3 ==============================

train: Epoch 3
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 4 ==============================

train: Epoch 4
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 5 ==============================

train: Epoch 5
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 6 ==============================

train: Epoch 6
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 7 ==============================

train: Epoch 7
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 8 ==============================

train: Epoch 8
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 9 ==============================

train: Epoch 9
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 10 ==============================

train: Epoch 10
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 11 ==============================

train: Epoch 11
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 12 ==============================

train: Epoch 12
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 13 ==============================

train: Epoch 13
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 14 ==============================

train: Epoch 14
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 15 ==============================

train: Epoch 15
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 16 ==============================

train: Epoch 16
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 17 ==============================

train: Epoch 17
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 18 ==============================

train: Epoch 18
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 19 ==============================

train: Epoch 19
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 20 ==============================

train: Epoch 20
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 21 ==============================

train: Epoch 21
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 22 ==============================

train: Epoch 22
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 23 ==============================

train: Epoch 23
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 24 ==============================

train: Epoch 24
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 25 ==============================

train: Epoch 25
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 26 ==============================

train: Epoch 26
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 27 ==============================

train: Epoch 27
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 28 ==============================

train: Epoch 28
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
============================== Epoch 29 ==============================

train: Epoch 29
0
1
2
3
4
5
6
7
8
9
Cannot import minkowski engine. Try spconv next
08/07/2021 08:20:29 - All processes launched! Ended
